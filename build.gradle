plugins {
    id 'java'
    id "me.champeau.jmh" version "0.7.2"
}

group = 'de.edu.lmu'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


dependencies {
    /*implementation files('libs/ssj-3.3.1.jar')*/
    testImplementation 'ca.umontreal.iro.simul:ssj:3.3.0'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java { toolchain { languageVersion = JavaLanguageVersion.of(21) } }

test {
    useJUnitPlatform()
}

sourceSets {
    crush {
        java {
            srcDirs = ['src/crush/java']
        }
        resources {
            srcDirs = ['src/crush/resources']
        }
    }

    vector21 {
        java {
            srcDirs = ['src/vector21/java']
        }
        resources {
            srcDirs = ['src/vector21/resources']
        }
    }
}

configurations {
    crushImplementation.extendsFrom testImplementation
    crushRuntimeOnly.extendsFrom testRuntimeOnly


    vector21Implementation.extendsFrom mainImplementation
    vector21RuntimeOnly.extendsFrom mainRuntimeOnly

}

dependencies {
    // Add dependencies for crush tests if any
    crushImplementation 'junit:junit:4.13.2'

    //crushTest need access to main
    crushImplementation sourceSets.main.output
    crushRuntimeOnly sourceSets.main.runtimeClasspath
    //crushTest need access to test
    crushImplementation sourceSets.test.output
    crushRuntimeOnly sourceSets.test.runtimeClasspath
    //vector extends main
    vector21Implementation sourceSets.main.output
    vector21RuntimeOnly sourceSets.main.runtimeClasspath
}

task crushTest(type: Test) {
    description = 'Runs the crush tests.'
    group = 'verification'

    testClassesDirs = sourceSets.crush.output.classesDirs
    classpath = sourceSets.crush.runtimeClasspath


    // Set the JVM system property to point to the native library directory
    //systemProperty 'java.library.path', file('target/release')
    jvmArgs = ['--enable-preview', '--enable-native-access=ALL-UNNAMED']
}

check.dependsOn crushTest

tasks.withType(JavaCompile).matching {
    it.name == 'compileVector21Java' || it.name == 'compileCrushJava'
}.configureEach {
    it.options.compilerArgs.add('--enable-preview')
}
tasks.withType(JavaCompile).matching {
    it.name == 'compileVector21Java'
}.configureEach {
    it.options.compilerArgs  += ['--add-modules', 'jdk.incubator.vector']
}


tasks.withType(Test) {
    jvmArgs += ['--add-modules', 'jdk.incubator.vector']
}

task vector21testmainrun(type: JavaExec) {
    group = 'application'
    description = 'Runs the TestMain class with vector incubator module enabled'
    classpath = sourceSets.vector21.runtimeClasspath
    mainClass.set('de.edu.lmu.pcg.impl.vector.preview21.TestMain')
    jvmArgs = ['--enable-preview', '--add-modules', 'jdk.incubator.vector']
}

/*tasks.named('run', JavaExec) {
    jvmArgs += ['--add-modules', 'jdk.incubator.vector']
}*/


//add preview to compileVector21

//add preview to runVector21
tasks.withType(JavaExec).matching {
    it.name == 'runVector21'
}.all {
    jvmArgs = ['--enable-preview']
}


//add



/*tasks.register('runLinearComp', JavaExec) {
    group = 'application'
    mainClass = 'de.edu.lmu.LinearComp'
    classpath = sourceSets.main.runtimeClasspath
}*/

